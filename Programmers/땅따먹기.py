
'''
# 문제
    - land는 총 4행 4열이고, 모든 칸에 점수가 쓰여 있다.
    - 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려온다.
    - 단, 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 규칙이 있다.
    - 마지막 행까지 내려왔을 때, 얻을 수 있는 점수의 최대 값을 return 하라.

# 제한조건
    - land : 2차원 배열
    - 행의 개수 : 100,000 이하의 자연수
    - 열의 개수 : 4
    - 점수 : 100 이하의 자연수
'''

'''
모든 케이스를 비교해서 max를 찾는 것은 아마 시간 테스트에서 걸릴 것이다.

현재 위치한 행과 다음 행만 고려해보자.
현재 행에서 한 칸을 선택했다면, 다음 칸으로 내려갈 때 그 칸을 제외한다.
따라서 다음 행에서는 그 칸을 제외한 숫자들 중 큰 수를 구하고, 현재 칸의 수와 더한다.
이렇게 모든 행을 반복한다.

'''

##########################################

def solution(land):
    for i in range(len(land)-1) :
        land[i+1][0] = max(land[i][1], land[i][2], land[i][3]) + land[i+1][0]
        land[i+1][1] = max(land[i][0], land[i][2], land[i][3]) + land[i+1][1]
        land[i+1][2] = max(land[i][0], land[i][1], land[i][3]) + land[i+1][2]
        land[i+1][3] = max(land[i][0], land[i][1], land[i][2]) + land[i+1][3]
        
    print(max(land[-1]))

##########################################

l = [[1,2,3,5],[5,6,7,8],[4,3,2,1]]
solution(l) # answer : 16